package com.study.basic.ch06.lambda;

// # 함수형 프로그래밍과 람다식
// 자바는 객체 지향 프로그래밍 : 기능을 수행하기 위해서는 객체를 만들고 그 객체 내부에 멤버 변수를 선언하고 기능을 수행하는 메서드를 구현
// 자바 8부터 함수형 프로그래밍 방식을 지원하고 이를 람다식이라 함
// # 함수형 프로그래밍(Functional Programming: FP)
// 함수의 구현과 호출만으로 프로그래밍이 수행되는 방식
// 순수 함수(pure function)를 조합하고 공유 상태(shared state), 변경 가능한 데이터(mutable data) 및 부작용(side-effects)을 피하는 기본 원칙에 따라 소프트웨어를 구성하는 프로그래밍 패러다임
// 함수형 프로그래밍은 순수함수(pure function)를 구현하고 호출함으로써 외부 자료에 부수적인 영향(side effect)를 주지 않도록 구현하는 방식
// 순수 함수란 매개변수만을 사용하여 만드는 함수 입니다. 즉, 함수 내부에서 함수 외부에 있는 변수를 사용하지 않아 함수가 수행되더라도 외부에는 영향을 주지 않음.
// 함수를 기반으로 하는 프로그래밍이고 입력받는 자료 이외에 외부 자료를 사용하지 않아 여러 자료가 동시에 수행되는 병렬처리가 가능.(동시에 여러 함수를 수행해도 문제가 없음)
// 함수형 프로그래밍은 함수의 기능이 자료에 독립적임을 보장 => 동일한 자료에 대해 동일한 결과를 보장하고(동일한 입력은 동일한 출력), 다양한 자료에 대해 같은 기능을 수행할 수 있다.
// 거의 모든 것을 순수 함수로 나누어 문제를 해결하는 기법으로, 작은 문제를 해결하기 위한 함수를 작성하여 가독성을 높이고 유지보수를 용이하게 해준다. 소스가 간결해짐
public class LambdaTest {

    // # 람다식
    // 함수형 프로그래밍을 위해 자바에서 제공하는게 람다식이다.
    // 함수를 하나의 식(expression)으로 표현한 것
    // 메소드를 람다식으로 표현하면 메소드의 이름과 반환값이 없어지므로 람다식을 '익명 함수(anonymous function)'라고도 한다.
    // 구현 클래스, 객체를 생성하고 메소드를 호출할 필요 없이 메소드의 역할을 대신할 수 있다.
    // 메소드의 매개변수와 반환값이 될 수 있어 메소드를 변수처럼 다룰 수 있게 한다.
    // 람다식이 등장하게 된 이유는 불필요한 코드를 줄이고, 가독성을 높이기 위함
    // 함수형 인터페이스의 인스턴스를 생성하여 함수를 변수처럼 선언
    // Stream API의 매개변수로 전달이 가능
    // 람다 표현식은 함수형 인터페이스로만 사용 가능
    // 매개 변수와 매개변수를 이용한 실행문 (매개변수) -> {실행문;}

    /*
        - 두 수를 입력 받아 더하는 add() 함수 예
            int add(int x, int y){
                return x+y;
            }

        - 람다식으로 표현
            (int x, int y) -> {return x+y;}

        - 매개 변수가 하나인 경우 자료형과 괄호 생략가능
            str->{System.out.println(str);}

        - 매개변수가 두 개이상인 경우 괄호를 생략할 수 없음
            x, y -> {System.out.println(x+y);}  //오류

        - 실행문이 한 문장인 경우 중괄호 생략 가능
            str-> System.out.println(str);

        - 실행문이 한 문장이라도 return문(반환문)은 중괄호를 생략할 수 없음
            str-> return str.length();  //오류

        - 실행문이 한 문장의 반환문인 경우엔 return과 중괄호를 모두 생략
            (x, y) -> x+y;
            str -> str.length;
    */

    public static void main(String[] args) {

        Add add = (x, y) -> x >= y? x + y : y + x; // 훨씬 간편한 익명클래스 같은 느낌..
        System.out.println(add.add(5, 5)); // // 인터페이스 자료형 변수로 함수 호출
    }
}
